// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }

        tilingOffset: { value: [1,1, 0, 0] }

        cycles: { value: 1 }
        amplitude: { value: 1 }

        alphaYScale: { value: 1 }
        alphaYPower: { value: 1 }

        alphaDist: { value: 5 }
        alphaDistPower: { value: 1 }
 
        time: { value: 0 }

  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%


CCProgram shared-ubo %{
  uniform SharedUBO {
    vec4 tilingOffset;
    vec4 mainColor;

    float cycles;
    float amplitude;

    float alphaYScale;
    float alphaYPower;
    
    float alphaDist;
    float alphaDistPower;

    float time;
  };
}%



CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/input>
  #include <legacy/fog-vs>

  #if USE_VERTEX_COLOR
    in lowp vec4 a_color;
    out lowp vec4 v_color;
  #endif

  #include <shared-ubo>

  out vec2 v_uv;

  out vec3 v_position;
  out vec3 v_cameraCenteringOffset;
  out float v_alpha;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);
    
    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;

    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif


    vec4 worldPos = matWorld * position;

    vec3 center = vec3(matWorld[3][0], matWorld[3][1], matWorld[3][2]);

    float dist = length(worldPos.xz - center.xz);
    float offset = sin(dist * cycles + time) * amplitude;

    v_alpha = pow((offset / amplitude + 1.) / 2. * alphaYScale, alphaYPower);
    v_alpha *= pow(max(1. - dist / alphaDist, 0.), alphaDistPower);

    worldPos.y += offset;

    v_position = worldPos.xyz;

    CC_TRANSFER_FOG(worldPos);
    return cc_matProj * cc_matView * worldPos;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  #include <shared-ubo>

  in vec2 v_uv;
  in vec3 v_position;

  in float v_alpha;

  uniform sampler2D mainTexture;


  vec4 frag () {
    vec4 col = mainColor * texture(mainTexture, v_uv);

    col.a *= v_alpha;

    CC_APPLY_FOG(col, v_position);
    return col;
  }
}%
